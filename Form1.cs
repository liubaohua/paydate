using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Drawing.Printing;
using System.Reflection;
using System.Runtime.InteropServices;
using System.IO.Ports;
using System.Data.SqlClient;
using System.Configuration;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using System.Threading;
//using Microsoft.Office.Core;
using Microsoft.Office;
using Microsoft.Reporting.WinForms;

namespace Print
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            try
            {
                InitializeComponent();
                dtp1.Text = String.Format("{0:yyyy-MM-dd}", new DateTime(DateTime.Now.Year,DateTime.Now.Month,1));
                dpt3.CustomFormat = " ";
                dpt4.CustomFormat = " ";
                dpt5.CustomFormat = " ";
                dpt6.CustomFormat = " ";
                //dpt4.Text = "";
                //dpt5.Text = "";
                //dpt6.Text = "";

                InitDatabaseSetting();
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message+"\n"+e.StackTrace,"");
            }
           
        }

        private System.Data.SqlClient.SqlConnection sqlConnection1;

        String XMLFILENAME = "UserData.xml";

        private void InitDatabaseSetting()
        {
            if (!File.Exists(XMLFILENAME))
                WriteXml();
            string ConnString = "data source=.;user id=sa;password=ufida123456;initial catalog=UFDATA_009_2015;Connect Timeout=10;Persist Security Info=True ;Current Language=Simplified Chinese;";
            string Server = ReadXmlData("SqlServer", "Server");
            string User = ReadXmlData("SqlServer", "User");
            string Password = ReadXmlData("SqlServer", "Password");
            string DataBase = ReadXmlData("SqlServer", "DataBase");
            ConnString = "data source=" + RC4.Decrypt("1",Server) + ";";
            ConnString += "user id=" + RC4.Decrypt("1",User) + ";";
            ConnString += "password=" + RC4.Decrypt("1",Password) + ";";
            ConnString += "initial catalog=" + RC4.Decrypt("1",DataBase) + ";";
            ConnString += "Connect Timeout=10;Persist Security Info=True ;Current Language=Simplified Chinese;";
            this.sqlConnection1.ConnectionString = ConnString;
        }

        String ReadXmlData(String ElementName,String ElementName2)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(XMLFILENAME);
            XmlNode root = doc.DocumentElement[ElementName];
            if (root != null && root.SelectSingleNode(ElementName2)!=null)
                return root.SelectSingleNode(ElementName2).InnerText;
            return "";
        }

        String ReadXmlData(String ElementName)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(XMLFILENAME);
            XmlNode root = doc.DocumentElement[ElementName];
            if (root != null)
                return root.InnerText;
            return "";
        }

        void ModifyXml(UserData ud)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(XMLFILENAME);
            XmlNode root = doc.DocumentElement[ud.ElementName];
            List<NameValuePair> udList = ud.ValueList;
            if(udList!=null)
            {
                for (int i = 0; i <= udList.Count - 1; i++)
                    root.SelectSingleNode(udList[i].Name).InnerText = udList[i].Value;
            }
            doc.Save(XMLFILENAME);
        }

        void ModifyXml(String Name, String Value)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(XMLFILENAME);
            XmlNode root = doc.DocumentElement[Name];
            if (root != null)
            {
                root.InnerText = Value;
                doc.Save(XMLFILENAME);
            }
        }


        void WriteXml()
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            XmlWriter writer = XmlWriter.Create(XMLFILENAME, settings);
            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by the program.");
            writer.WriteStartElement("Information");
            writer.WriteStartElement("SqlServer");
            writer.WriteElementString("Server", "");
            writer.WriteElementString("User", "");
            writer.WriteElementString("Password", "");
            writer.WriteElementString("DataBase", "");
            writer.WriteEndElement();
            writer.WriteEndElement();
            writer.WriteEndDocument();

            writer.Flush();
            writer.Close();

        }
        string isLog = "";

        private object missing = Missing.Value;
        //        private System.Data.SqlClient.SqlCommand sqlCommand1;

        /// <summary>
        /// 打印
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button1_Click(object sender, EventArgs e)
        {
            try
            {


            }
            catch (Exception ex)
            {
                MessageBox.Show(("y".Equals(isLog)?ex.StackTrace:ex.Message), "打印时错误");
            }
        }

        private DateTime FormatTime(string p)
        {
            return DateTime.Parse(p);
        }

        public static string StringToBinary(string data)
        {
            StringBuilder sb = new StringBuilder();

            foreach (char c in data.ToCharArray())
            {
                sb.Append(Convert.ToString(c, 2).PadLeft(8, '0'));
            }
            return sb.ToString();
        }

        public void GcCollect()
        {
            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        private void ReadScale_Click(object sender, EventArgs e)
        {

        }

        private void DbSetting_Click(object sender, EventArgs e)
        {
            DbSettingForm form = new DbSettingForm();
            DialogResult dr = form.ShowDialog();
            if (dr == System.Windows.Forms.DialogResult.OK)
            {
                UserData ud = new UserData();
                ud.ElementName = "SqlServer";
                List<NameValuePair> list = new List<NameValuePair>();
                NameValuePair np = new NameValuePair();
                np.Name = "Server";
                np.Value = RC4.Encrypt("1",form.getIP());
                list.Add(np);

                np = new NameValuePair();
                np.Name = "User";
                np.Value = RC4.Encrypt("1",form.getUser());
                list.Add(np);

                np = new NameValuePair();
                np.Name = "Password";
                np.Value = RC4.Encrypt("1",form.getPassword());
                list.Add(np);

                np = new NameValuePair();
                np.Name = "DataBase";
                np.Value = RC4.Encrypt("1", form.getDatabasename());
                list.Add(np);


                ud.ValueList = list;
                ModifyXml(ud);
                InitDatabaseSetting();
            }
        }

        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control & e.KeyCode == Keys.S)//CTRL + S
                DbSetting_Click(null, null);

        }

        private void TestDb()
        {
            try
            {
                SqlCommand cmdSelect = new SqlCommand("select 1 as mydata", this.sqlConnection1);
                //cmdSelect.Parameters.Add("@ID", SqlDbType.Int, 4);
                //cmdSelect.Parameters["@ID"].Value = InvCode
                this.sqlConnection1.Open();
                MessageBox.Show("数据库连接成功","提示");
            }
            catch
                (Exception e)
            {
                MessageBox.Show(e.Message, "提示");
            }
            finally
            {
                this.sqlConnection1.Close();
            }
            
        }
        private void button2_Click(object sender, EventArgs e)
        {
        }


        private void btQry_Click(object sender, EventArgs e)
        {
                try
                {
                    StringBuilder condition = new StringBuilder();
                    if (dtp1.Text.Trim().Equals("") || dtp2.Text.Trim().Equals(""))
                    {
                        MessageBox.Show("请您选择付款日期", "提示");
                        return;
                    }
                    if (!tbVendor.Text.Equals("") && !tbVendor2.Text.Equals(""))
                        condition.Append(" and cVenName>='" + tbVendor.Text + "' and cVenName<='" + tbVendor2.Text + "' ");
                    //付款日期
                    if (!dtp1.Text.Trim().Equals("") && !dtp2.Text.Trim().Equals(""))
                        condition.Append(" and PayDate>='" + String.Format("{0:yyyy-MM-dd}", dtp1.Text) + "' and PayDate<='" + String.Format("{0:yyyy-MM-dd}", dtp2.Text) + "' ");
                    //订单日期
                    if (!dpt3.Text.Trim().Equals("") && !dpt4.Text.Trim().Equals(""))
                        condition.Append(" and cmaketime>='" + String.Format("{0:yyyy-MM-dd}", dpt3.Text) + "' and cmaketime<='" + String.Format("{0:yyyy-MM-dd}", dpt4.Text) + "' ");
                    //开票日期
                    if (!dpt5.Text.Trim().Equals("") && !dpt6.Text.Trim().Equals(""))
                        condition.Append(" and dPBVDate>='" + String.Format("{0:yyyy-MM-dd}", dpt5.Text) + "' and dPBVDate<='" + String.Format("{0:yyyy-MM-dd}", dpt6.Text) + "' ");
                    
                    
                    if (!cbPayTerm1.Text.Equals("") && !cbPayTerm2.Text.Equals(""))
                        condition.Append(" and PayTerm>='" + cbPayTerm1.Text + "' and PayTerm<='" + cbPayTerm2.Text + "' ");
                    if (!tbPoCode1.Text.Equals("") && !tbPocode2.Text.Equals(""))
                        condition.Append(" and cPOID>='" + tbPoCode1.Text + "' and cPOID<='" + tbPocode2.Text + "' ");

          
                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine("select row_number() over (order by aa.cPOID) as 序号,aa.* from (select count(1) over (partition by ph.cPOID) as cnt, ph.cPOID,CONVERT(nvarchar(30), ph.dpodate, 112) as cmaketime,v.cVenName,ph.cexch_name,pb.cInvCode,i.cInvName,i.cInvStd,i.cInvAddCode,cu.cComUnitName,");
                    sb.AppendLine("cast(pb.iQuantity as decimal(18,2)) as iQuantity,");
                    sb.AppendLine("cast(pb.iMoney as decimal(18,2)) as iMoney,");
                    sb.AppendLine("cast(pb.iSum as decimal(18,2)) as iSum,");
                    sb.AppendLine("cast(pb.iNatMoney as decimal(18,2)) as iNatMoney,");
                    sb.AppendLine("cast(pb.iNatSum as decimal(18,2)) as iNatSum,");

                    sb.AppendLine("cast(sum(pb.iMoney) over (partition by ph.cPOID)  as decimal(18,2)) as iMoney_Total,");
                    sb.AppendLine("cast(sum(pb.iSum) over (partition by ph.cPOID)  as decimal(18,2)) as iSum_Total,");
                    sb.AppendLine("cast(sum(pb.iNatMoney) over (partition by ph.cPOID)  as decimal(18,2)) as iNatMoney_Total,");
                    sb.AppendLine("cast(sum(pb.iNatSum) over (partition by ph.cPOID)  as decimal(18,2)) as iNatSum_Total,");


                    sb.AppendLine("cast(pb.iTaxPrice as decimal(18,2)) as iTaxPrice,");
                    sb.AppendLine("cast(pb.iNatInvMoney as decimal(18,2)) as iNatInvMoney,");
                    sb.AppendLine("cast(pb.iOriTotal as decimal(18,2)) as iOriTotal,");
                    sb.AppendLine("cast(pb.iTotal as decimal(18,2)) as iTotal,");

                    sb.AppendLine("cast(sum(pb.iTaxPrice) over (partition by ph.cPOID)  as decimal(18,2)) as iTaxPrice_Total,");
                    sb.AppendLine("cast(sum(pb.iNatInvMoney) over (partition by ph.cPOID)  as decimal(18,2)) as iNatInvMoney_Total,");
                    sb.AppendLine("cast(sum(pb.iOriTotal) over (partition by ph.cPOID)  as decimal(18,2)) as iOriTotal_Total,");
                    sb.AppendLine("cast(sum(pb.iTotal) over (partition by ph.cPOID)  as decimal(18,2)) as iTotal_Total,");


                    sb.AppendLine(" CONVERT(nvarchar(30), pt.dPBVDate, 112) as dPBVDate,");
                    sb.AppendLine("v.cVenDefine1 as PayTerm,");
                    sb.AppendLine("(case when v.cVenDefine1='预付款' then CONVERT(nvarchar(30), ph.cAuditDate, 112) ");
                    sb.AppendLine("when v.cVenDefine1='见票付款' then CONVERT(nvarchar(30), pt.dPBVDate, 112) ");
                    sb.AppendLine("when v.cVenDefine1='月结30天' then CONVERT(nvarchar(30), pt.dPBVDate+30, 112)");
                    sb.AppendLine("when v.cVenDefine1='月结60天' then CONVERT(nvarchar(30), pt.dPBVDate+60, 112)");
                    sb.AppendLine("end ) as PayDate,");
                    sb.AppendLine("ph.cmaker ");
                    sb.AppendLine("from PO_Pomain ph inner join Po_PoDetails pb on ph.POID=pb.POID");
                    sb.AppendLine("inner join Inventory i on pb.cInvCode = i.cInvCode");
                    sb.AppendLine("inner join ComputationUnit cu on cu.cComunitCode  = i.cComUnitCode");
                    sb.AppendLine("inner join Vendor v on v.cVencode = ph.cVencode");
                    sb.AppendLine("inner join (select pvb.iPOsID,max(pvh.dPBVDate) as dPBVDate from PurBillVouchs pvb inner join PurBillVouch pvh on pvh.PBVID = pvb.PBVID group by pvb.iPOsID) pt");
                    sb.AppendLine("on pt.iPOsID= pb.ID ) aa");
                    sb.AppendLine("where 1=1 ");
                   // sb.AppendLine("and iTotal<=iNatInvMoney ");
                    sb.AppendLine(condition.ToString());
                    //sb.Remove(0, sb.Length);
                    //sb.Append("select 'ddadaf' as a union all select '22adasfdasf' union all select 'e2890345fsdklgdst' ");


                    SqlCommand cmdSelect = new SqlCommand(sb.ToString(), this.sqlConnection1);
                    this.sqlConnection1.Open();
                    SqlDataAdapter da = new SqlDataAdapter(cmdSelect);
                    System.Data.DataTable dt = new System.Data.DataTable();
                    da.Fill(dt);
                    dvResult.DataSource = dt;

                    

                    //this.reportViewer1.Reset();
                    //this.reportViewer1.LocalReport.DataSources.Clear();
                    //this.reportViewer1.LocalReport.ReportPath = "Report1.rdlc";
                    //this.reportViewer1.LocalReport.ReportEmbeddedResource = "Print.Report1.rdlc";
                    //ReportDataSource rds = new ReportDataSource("ds", dt); //ReportDataSource数据源的第一个参数必须与你添加的dataset的名字相同
                    //this.reportViewer1.LocalReport.DataSources.Add(rds);  //添加数据源
                    //this.reportViewer1.ZoomMode = ZoomMode.Percent;
                    //this.reportViewer1.RefreshReport();
                    



                    //this.reportViewer1.ProcessingMode = ProcessingMode.Local;
                    //this.reportViewer1.LocalReport.ReportPath = "Report1.rdlc";
                    //this.reportViewer1.LocalReport.ReportEmbeddedResource = "Print.Report1.rdlc";
                    //this.reportViewer1.LocalReport.EnableExternalImages = true;

                    //List<ReportParameter> para = new List<ReportParameter>();
                    ////这里是添加两个字段
                    //para.Add(new ReportParameter("FishName", "fishkel"));
                    //para.Add(new ReportParameter("FishId", "123"));
                    ////这里是添加两个数据源，两个list
                    //var list = new List<TestReport> { };
                    //list.Add(new TestReport() { a = "20100201", b = 0.1, c = 0.2, d = 0.1 });
                    //list.Add(new TestReport() { a = "20100202", b = 0.1, c = 0.2, d = 0.2 });
                    //list.Add(new TestReport() { a = "20100203", b = 0.1, c = 0.4, d = 0.2 });
                    //var test = new List<TestReport>() { new TestReport() { a = "20100201", b = 0.33, c = 0.33, d = 0.33 } };
                    //ReportDataSource reportDataSource = new ReportDataSource();
                    //reportDataSource.Name = "DataSet1";
                    //reportDataSource.Value = test;


                    //this.reportViewer1.LocalReport.DataSources.Add(reportDataSource);
                    ////this.reportViewer1.LocalReport.DataSources.Add(new ReportDataSource("TestList", list));
                    //this.reportViewer1.LocalReport.SetParameters(para);
                    //this.reportViewer1.RefreshReport();
                    

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "错误");
                }
                finally
                {
                    this.sqlConnection1.Close();
                }
        }





        private void MergeCells(int RowId1, int RowId2, int Column, bool isSelected, DataGridView dataGrid)
        {
            Graphics g = dataGrid.CreateGraphics();
            Pen gridPen = new Pen(dataGrid.GridColor);

            //Cells Rectangles
            Rectangle CellRectangle1 = dataGrid.GetCellDisplayRectangle(Column, RowId1, true);
            Rectangle CellRectangle2 = dataGrid.GetCellDisplayRectangle(Column, RowId2, true);

            int rectHeight = 0;
            string MergedRows = String.Empty;

            for (int i = RowId1; i <= RowId2; i++)
            {
                rectHeight += dataGrid.GetCellDisplayRectangle(Column, i, false).Height;
            }

            Rectangle newCell = new Rectangle(CellRectangle1.X, CellRectangle1.Y, CellRectangle1.Width, rectHeight);

            g.FillRectangle(new SolidBrush(isSelected ? dataGrid.DefaultCellStyle.SelectionBackColor : dataGrid.DefaultCellStyle.BackColor), newCell);

            g.DrawRectangle(gridPen, newCell);

            g.DrawString(dataGrid.Rows[RowId1].Cells[Column].Value.ToString(), dataGrid.DefaultCellStyle.Font, new SolidBrush(isSelected ? dataGrid.DefaultCellStyle.SelectionForeColor : dataGrid.DefaultCellStyle.ForeColor), newCell.X + newCell.Width / 3, newCell.Y + newCell.Height / 3);
        }

        private void dvResult_Paint(object sender, PaintEventArgs e)
        {
            if (dvResult.Rows.Count > 1)
            {
                dvResult.Columns["cPOID"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["序号"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cnt"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cmaketime"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cVenName"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cexch_name"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cInvCode"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cInvName"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cInvStd"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cInvAddCode"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cComUnitName"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["iQuantity"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["iTaxPrice"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["iNatInvMoney"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["iOriTotal"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["iTotal"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["dPBVDate"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["PayTerm"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["PayDate"].SortMode = DataGridViewColumnSortMode.NotSortable;
                dvResult.Columns["cmaker"].SortMode = DataGridViewColumnSortMode.NotSortable;



                dvResult.Columns["cPOID"].HeaderText = "订单号";
                dvResult.Columns["cmaketime"].HeaderText = "制单时间";
                dvResult.Columns["cVenName"].HeaderText = "供应商";
                dvResult.Columns["cexch_name"].HeaderText = "币种";
                dvResult.Columns["cInvCode"].HeaderText = "存货编码";
                dvResult.Columns["cInvName"].HeaderText = "存货名称";
                dvResult.Columns["cInvStd"].HeaderText = "规格";
                dvResult.Columns["cInvAddCode"].HeaderText = "存货代码";
                dvResult.Columns["cComUnitName"].HeaderText = "单位";
                dvResult.Columns["iQuantity"].HeaderText = "数量";
                dvResult.Columns["iTaxPrice"].HeaderText = "累计原币发票金额";
                dvResult.Columns["iNatInvMoney"].HeaderText = "累计本币发票金额";
                dvResult.Columns["iOriTotal"].HeaderText = "累计原币付款";
                dvResult.Columns["iTotal"].HeaderText = "累计本币付款";
                dvResult.Columns["dPBVDate"].HeaderText = "开票日期";
                dvResult.Columns["PayTerm"].HeaderText = "付款条件";
                dvResult.Columns["PayDate"].HeaderText = "付款日期";
                dvResult.Columns["cmaker"].HeaderText = "订单制单人";

                for (int i = 0; i < dvResult.Rows.Count; )
                {
                    int rows = int.Parse(dvResult.Rows[i].Cells["cnt"].Value.ToString());
                    if (rows > 1)
                    {
                        MergeCells(i, i + rows - 1, 2, false, dvResult);
                        MergeCells(i, i + rows - 1, 3, false, dvResult);
                        MergeCells(i, i + rows - 1, 4, false, dvResult);
                        MergeCells(i, i + rows - 1, 5, false, dvResult);

                        MergeCells(i, i + rows - 1, 16, false, dvResult);
                        MergeCells(i, i + rows - 1, 17, false, dvResult);
                        MergeCells(i, i + rows - 1, 18, false, dvResult);
                        MergeCells(i, i + rows - 1, 19, false, dvResult);

                        MergeCells(i, i + rows - 1, 24, false, dvResult);
                        MergeCells(i, i + rows - 1, 25, false, dvResult);
                        MergeCells(i, i + rows - 1, 26, false, dvResult);
                        MergeCells(i, i + rows - 1, 27, false, dvResult);


                    }
                    i = i + rows;
                }
                //if (dvResult.Columns["cnt"].Visible)
                //    dvResult.Columns["cnt"].Visible = false;
            }
            
        }

        private void dvResult_Sorted(object sender, EventArgs e)
        {
           
        }

        private void Form1_Load(object sender, EventArgs e)
        {

          //  this.reportViewer1.RefreshReport();
        }

        private void reportViewer1_Load(object sender, EventArgs e)
        {

        }
    }


    public class TestReport
    {
        public string a { get; set; }
        public double b { get; set; }
        public double c { get; set; }
        public double d { get; set; }
    }


}
